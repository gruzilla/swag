«IMPORT metamodel»

«EXTENSION template::GeneratorExtensions»

«DEFINE model(Entity entity) FOR Entity»
		«FILE "swag/db/model/" + entity.name + ".java"»
		package swag.db.model;
		
		import javax.persistence.*;
		import java.util.Set;
		import java.io.Serializable;
		import java.sql.Date;
		
		@Entity(name="swa_«entity.name.toFirstLower()»")
		«EXPAND Inheritance::inheritanceAnnotation(entity.bequeathesTo)»
		public class «entity.name» «EXPAND Inheritance::inherits(entity.inherits)» implements Serializable {
		
		private static final long serialVersionUID = «getUID()»L;
		
        «EXPAND id»
        «FOREACH features AS f»
				private «f.type.name» «f.attribute()»;
		«ENDFOREACH»
        «EXPAND Relations::relationAttributes»
        «EXPAND gettersAndSetters»		
		«EXPAND Relations::createRelations»	
		«EXPAND equalsAndHashCode»
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE id FOR Entity»
	«IF inherits == null && featuresId == null»
	// ====================================================
	// 
	// 			ERROR! ID-FEATURE IS MISSING!
	// 
	// ====================================================
	«ENDIF»
	«IF inherits == null && featuresId != null»
		private «featuresId.type.name» «featuresId.name»;
		
		@Id
		@GeneratedValue(strategy = «featuresId.generationType == null ? "GenerationType.TABLE" : featuresId.generationType»)
		«EXPAND getters(featuresId)»
		«EXPAND setters(featuresId)»
	«ENDIF»
«ENDDEFINE»

«DEFINE gettersAndSetters FOR Entity»
	«FOREACH features AS f»
				@Column(«IF f.nullable == false»nullable = false«ENDIF»)
				«EXPAND getters(f)»
				«EXPAND setters(f)»
			«ENDFOREACH»
«ENDDEFINE»

«DEFINE getters(Feature f) FOR Entity»
	public «f.type.name» «f.getter()»() {
		return «f.attribute()»;
	}
«ENDDEFINE»

«DEFINE setters(Feature f) FOR Entity»
	public void «f.setter()»(«f.type.name» «f.attribute()») {
		this.«f.attribute()» = «f.attribute()»;
	}
«ENDDEFINE»

«DEFINE equalsAndHashCode FOR Entity»

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null || getClass() != obj.getClass()) return false;
		
		«name.toFirstUpper()» other = («name.toFirstUpper()») obj;
		
		«EXPAND Relations::relationAttributeEquals»
		«EXPAND featuresEqual»
		
		return true;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		
		«EXPAND Relations::relationAttributeHash»
		«EXPAND featuresHash»
		
		return result;
	}
«ENDDEFINE»


«DEFINE featuresEqual FOR Entity»
	«FOREACH features AS f»
		if («f.name» == null) {
			if (other.«f.name» != null)
				return false;
		} else if (!«f.name».equals(other.«f.name»))
			return false;
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE featuresHash FOR Entity»
	«FOREACH features AS f»	
		result = prime * result + ((«f.name» == null) ? 0 : «f.name».hashCode());
	«ENDFOREACH-»
«ENDDEFINE»

«IMPORT metamodel»

«EXTENSION template::GeneratorExtensions»

«DEFINE dao(Entity entity) FOR Entity»
	«FILE "swag/db/dao/" + entity.name + "DAO.java"»
	package swag.db.dao;
	
	import javax.persistence.*;
	import swag.db.model.«entity.name»;
	
	public class «entity.name»DAO {

        private static EntityManagerFactory entityManagerFactory;
        private static EntityManager entityManager;
        
        public static void initializeEntityManagerFactory(EntityManagerFactory entityManagerFactory) {
			«entity.name»DAO.entityManagerFactory = entityManagerFactory;
			entityManager = entityManagerFactory.createEntityManager();
		}
		
		«EXPAND delete(entity)»
		«EXPAND get(entity)»
		«EXPAND persist(entity)»
		«EXPAND update(entity)»
		«EXPAND refresh(entity)»
		«EXPAND rollBackTransaction»
		«EXPAND shutdown»
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE EntityManager FOR Entity-»
EntityManager entityManager = entityManagerFactory.createEntityManager();«ENDDEFINE»

«DEFINE CommitAndShutdown FOR Entity-»
entityManager.getTransaction().commit();
«ENDDEFINE»

«DEFINE Catch FOR Entity-»
catch (RuntimeException e) {
	rollBackTransaction(entityManager);
	throw e;
}«ENDDEFINE»

«DEFINE delete(Entity entity) FOR Entity»
public void delete(«entity.name» «entity.name.toFirstLower()») {
	try {
		entityManager.getTransaction().begin();
		entityManager.remove(«entity.name.toFirstLower()»);
		«EXPAND CommitAndShutdown»
	}
	«EXPAND Catch»
}
«ENDDEFINE»

«DEFINE get(Entity entity) FOR Entity»
public «entity.name» get(
	«IF entity.inherits == null-»
		«entity.featuresId.type.name-»
	«ELSE-»
		«entity.inherits.featuresId.type.name-»
	«ENDIF-»
	 key) {
	«entity.name» «entity.name.toFirstLower()» = entityManager.find(«entity.name».class, key);
	return «entity.name.toFirstLower()»;
}
«ENDDEFINE»

«DEFINE persist(Entity entity) FOR Entity»		
public void persist(«entity.name» «entity.name.toFirstLower()») {
	entityManager.getTransaction().begin();
	try {
		entityManager.persist(«entity.name.toFirstLower()»);
		«EXPAND CommitAndShutdown»
	}
	«EXPAND Catch»
}
«ENDDEFINE»

«DEFINE update(Entity entity) FOR Entity»
public «entity.name» update(«entity.name» «entity.name.toFirstLower()») {
	«entity.name» merged;
	entityManager.getTransaction().begin();
	try {
		merged = entityManager.merge(«entity.name.toFirstLower()»);
		«EXPAND CommitAndShutdown»
		return merged;
		}
	«EXPAND Catch»
}
«ENDDEFINE»

«DEFINE refresh(Entity entity) FOR Entity-»
public void refresh(«entity.name» «entity.name.toFirstLower()») {
	try {
		entityManager.refresh(«entity.name.toFirstLower()»);
	}
	catch(RuntimeException e) {
		throw e;
	}
}
«ENDDEFINE»

«DEFINE rollBackTransaction FOR Entity»
private void rollBackTransaction(EntityManager entityManager) {
	if (entityManager.getTransaction().isActive())
		entityManager.getTransaction().rollback();
}
«ENDDEFINE»

«DEFINE shutdown FOR Entity»
public static void shutdown(EntityManager entityManager) {
	if(entityManager != null &&	entityManager.isOpen()) {
		entityManager.close();
	}
}
«ENDDEFINE»